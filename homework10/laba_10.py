# -*- coding: utf-8 -*-
"""Lab10 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pv6aGgZUKhZY8IhqHL07XdcjI5XlZLJX
"""

# Commented out IPython magic to ensure Python compatibility.

import pandas as pd
import math
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn.metrics import roc_curve, auc, accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification
from matplotlib import pylab
import pylab as plt
import scipy
# %matplotlib inline

iris = datasets.load_iris()
X = iris.data[:100, :2]
y = iris.target[:100]

class LogRegression:
    def __init__(self, lr=0.01, n_iter=100):
        self.lr = lr
        self.n_iter = n_iter
        
    def fit(self, X, y):
        X = np.hstack([np.ones((len(X), 1)), X])
        self.theta = np.zeros(X.shape[1])
        for i in range(self.n_iter):
            z = X @ self.theta
            p =  1 / (1 + np.exp(-z))
            gradient = (X.T @ (p - y)) / len(y)
            self.theta -= self.lr * gradient

        
    def predict(self, X):
        X = np.hstack([np.ones((len(X), 1)), X])
        pred = (1 / (1 + np.exp(-(X @ self.theta))))
        return [1 if i > 0.5 else 0 for i in pred]

    def p_tryout(self, X):
      tryout = sigmoid(X)
      scipy.special.expit(tryout, out=tryout)
      if tryout.ndim == 1:
          return np.vstack([1 - tryout, tryout]).T
      else:
          tryout /= tryout.sum(axis=1).reshape((tryout.shape[0], -1))
          return tryout

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.33, random_state=18)

# Commented out IPython magic to ensure Python compatibility.
model = LogRegression()
# %time model.fit(X_train, Y_train)

y_pred = model.predict(X_test)
y_pred

model.theta

accuracy_score(Y_test, y_pred)

def sigmoid(x):
    sigmoid_return = 1 / (1 + np.exp(-x))
    return sigmoid_return

x = model.theta
y = pylab.linspace(0,1,10)

pylab.plot(x, sigmoid(x), 'r')
pylab.grid()
pylab.title('Sigmoid Function')
pylab.xlabel('X Axis')
pylab.ylabel('Y Axis')

"""Проверка:"""

X, y = make_classification(n_samples=10000, n_features=10, n_classes=2, n_informative=5, random_state=17)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=17)
model = LogRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy_score(y_test, y_pred)